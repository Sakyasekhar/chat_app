<html lang="en">
<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, intial-scale=1.0">
   <link rel="preconnect" href="https://fonts.googleapis.com">
   <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
   <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;900&display=swap" rel="stylesheet">
   <script src="https://cdn.tailwindcss.com"></script>
   <link rel="stylesheet" type="text/css"  href="style.css">

</head>
<body>

   <!-- navbar -->
   <%- include('./partials/nav.ejs') %>
   
   <!-- 2 areas -->
   <div id="middle" >
   <div id="middle-offset" cclass="flex h-full ">
    
      <!-- left area -->
      <div id="left" cclass="bg-light_purple h-full w-1/4 mt-16 overflow-y-auto absolute  ">

         <p class="text-2xl p-7">Room</p>
         <span class="flex"><img src="/images/online.png" alt="online" class="pl-7 h-6 w-13" />
            <p class="text-xl pl-1.5">Online</p>
         </span>
         <hr>
         <div class="pl-7 pr-7"> 
          <div  class="users"></div>

         </div>
      </div>

      <!-- right area -->
      <div id="right" cclass="w-3/4 pl-1/2 absolute overflow-y-auto ">
        <ul id="messages"></ul>

        <div >
          <div id="output"></div>
          <div id="feedback"></div>
        </div>

         <form id="form" class="flex fixed bottom-0 w-3/4" >
            <input id="input" placeholder="Type a message" class="outline-none pl-2 bg-gray w-11/12 rounded-md" autocomplete="off" /><button><img class="h-10 w-10 ml-5 cursor-pointer" src="/images/sent.png" alt=""></button>
         </form>
         <!-- <p class=" ">sakya</p>
         <p class="mt-96 pt-96">jhkl</p> -->
   
      </div> 
   </div>
   </div>
   






   
   
   
   


   <script src="/socket.io/socket.io.js"></script>
    <script>
   

      var socket = io();


      var messagesCan = document.getElementById('messages');
      var form = document.getElementById('form');
      var input = document.getElementById('input');

      const userList = document.querySelector('.users');

      const queryString = window.location.search;
      const urlParams = new URLSearchParams(queryString);
      const username = urlParams.get('username');
      const roomname = urlParams.get('roomname');
  
    
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        if (input.value) {
          var msg = input.value;
          socket.emit('chat message', {msg:msg,name:username});

          // Create a new message object with a unique message_id
          const message = {
           message_id: Date.now().toString(),
           sender_id: getUserId(),
           timestamp: new Date(),
           message_text: msg
          };

          console.log("roomname:", roomname); // Make sure that roomname variable is defined and has a value
          console.log("message:", message); // Make sure that message variable is defined and has a value
          console.log("Group ID:"+JSON.stringify(roomname));
          console.log("Message:", message);



          console.log('About to make a POST request to save message...');

          // Make a POST request to the server to save the message
          fetch('/messages', {
            method: 'POST',
            headers: {
             'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            group_id: roomname,
            message: message
          })
          })
          .then(response => {
            if (response.ok) {
              console.log('Message posted successfully!');
            } else {
            throw new Error('Failed to post message');
            }
          })
          .catch(error => {
            console.error('Error posting message:', error);
          });
        }

        // Clear the input field after the message is sent
        input.value = '';
          
      });



      // Helper function to get the current user's ID
      function getUserId() {
        // Get the user ID from your application's authentication system
        // return currentUser.id;
        return username;
      }
        


      //Emitting username and roomname of newly joined user to server
      socket.emit('joined-user',{
        username: username,
        roomname: roomname,
        
      })


      // Display the chat history when the page is loaded
      fetch(`/room/chat-history?group_id=${roomname}`)
      .then(response => {
      return response.json();
      })
      .then(data => {
        // console.log("messages"+JSON.stringify(data.messages[0].messages[1].message_text))
       // Loop through the messages and append them to the chat window
       if (data.messages) {

      data.messages[0].messages.forEach(message => {
        // messagesCan.innerHTML += `<p>${message.sender_id}: ${message.message_text}</p>`;
        if(username==message.sender_id){messagesCan.innerHTML +=( `<p class="mt-2 mb-2 text-right" >${message.sender_id}: ${message.message_text}</p>`+ `<hr>`);}
        if(username!=message.sender_id){messagesCan.innerHTML +=( `<p class="mt-2 mb-2 " >${message.sender_id}: ${message.message_text}</p>`+ `<hr>`);}
      });
    }
      })
      .catch(error => {
        console.error('Error fetching chat history:', error);
      });


      

      socket.on('online-users', (users) =>{
        users = Object.values(users)[0]
        userList.innerHTML = ''
        users.forEach((user) => {
        userList.innerHTML += (`<p class="mt-2 mb-2" >${user}</p>`+ `<hr>`)

       })
      })
      
      socket.on('chat message', function(data) {
        var textContent =Object.values(data)[1]+':'+Object.values(data)[0]

        if(username==Object.values(data)[1]){messagesCan.innerHTML +=( `<p class="mt-2 mb-2 text-right" >${textContent}</p>`+ `<hr>`);}
        if(username!=Object.values(data)[1]){messagesCan.innerHTML +=( `<p class="mt-2 mb-2 " >${textContent}</p>`+ `<hr>`);}
        
        window.scrollTo(0, document.body.scrollHeight);
      });
    </script>
   
   
   <!--colors-->
   <script>
      tailwind.config = {
        theme: {
          screens: {
             sm: '480px',
             md: '768px',
             lg: '976px',
             xl: '1440px',
          },
          extend: {
            colors: {
              'purple': '46475E',
              'light_purple': 'B0B2E2',
              'gray': '#D9D9D9',

              
            }
          }
        }
      }
    </script>
</body>
</html>